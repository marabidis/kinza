import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter_kinza/theme/app_theme.dart';
import 'package:flutter/services.dart';

class HorizontalMenu extends StatefulWidget {
  final List<String> categories;
  final String? activeCategory;
  final Function(String) onCategoryChanged;

  const HorizontalMenu({
    Key? key,
    required this.categories,
    required this.activeCategory,
    required this.onCategoryChanged,
  }) : super(key: key);

  static const Map<String, String> _emojis = {
    '–ü–∏—Ü—Ü–∞': 'üçï',
    '–ë–ª—é–¥–∞ –Ω–∞ –º–∞–Ω–≥–∞–ª–µ': 'üçñ',
    '–•–∞—á–∞–ø—É—Ä–∏': 'üßÄ',
    '–ö –±–ª—é–¥—É': 'ü•ó',
  };

  @override
  State<HorizontalMenu> createState() => _HorizontalMenuState();
}

class _HorizontalMenuState extends State<HorizontalMenu> {
  late final List<GlobalKey> _itemKeys =
      List.generate(widget.categories.length, (_) => GlobalKey());

  @override
  void didUpdateWidget(covariant HorizontalMenu oldWidget) {
    super.didUpdateWidget(oldWidget);
    // –ê–∫–∫—É—Ä–∞—Ç–Ω–æ! –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–º–µ–Ω–∏–ª–∞—Å—å —á–µ—Ä–µ–∑ scroll –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞,
    // —Ç–æ–≥–¥–∞ –¥–æ—Ü–µ–Ω—Ç—Ä–æ–≤—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    if (widget.activeCategory != oldWidget.activeCategory) {
      SchedulerBinding.instance
          .addPostFrameCallback((_) => _ensureActiveVisible());
    }
  }

  void _ensureActiveVisible() {
    final idx = widget.categories.indexOf(widget.activeCategory ?? '');
    if (idx == -1) return;

    final ctx = _itemKeys[idx].currentContext;
    if (ctx == null) return;

    Scrollable.ensureVisible(
      ctx,
      alignment: 0.5,
      curve: Curves.fastOutSlowIn,
      duration: const Duration(milliseconds: 500),
    );
  }

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: AppTheme.menuHeight,
      child: ClipRRect(
        borderRadius: BorderRadius.circular(AppTheme.menuRadius),
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 12, sigmaY: 12),
          child: Container(
            // –ø–æ—á—Ç–∏-–Ω–µ–≤–∏–¥–∏–º—ã–π —Ü–≤–µ—Ç, —á—Ç–æ–±—ã BackdropFilter —Ä–∞–±–æ—Ç–∞–ª –∏ "–º–µ–∂–¥—É" –∫–Ω–æ–ø–∫–∞–º–∏
            color: Colors.white.withOpacity(0.01),
            child: ListView.separated(
              scrollDirection: Axis.horizontal,
              padding: const EdgeInsets.symmetric(horizontal: 6),
              itemCount: widget.categories.length,
              separatorBuilder: (_, __) => const SizedBox(width: 6),
              itemBuilder: (context, i) {
                final cat = widget.categories[i];
                return _MenuButton(
                  key: _itemKeys[i],
                  emoji: HorizontalMenu._emojis[cat] ?? '',
                  text: cat,
                  active: cat == widget.activeCategory,
                  // onTap —Ç–æ–ª—å–∫–æ —Å–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –±–µ–∑ ensureVisible
                  onTap: () => widget.onCategoryChanged(cat),
                );
              },
            ),
          ),
        ),
      ),
    );
  }
}

/* ---------- helper: –¥–µ—Å–∞—Ç—É—Ä–∞—Ü–∏—è ---------- */
const _kGray = ColorFilter.matrix(<double>[
  0.2126,
  0.7152,
  0.0722,
  0,
  0,
  0.2126,
  0.7152,
  0.0722,
  0,
  0,
  0.2126,
  0.7152,
  0.0722,
  0,
  0,
  0,
  0,
  0,
  1,
  0,
]);
/* ----------------------------------------- */

class _MenuButton extends StatelessWidget {
  final String emoji;
  final String text;
  final bool active;
  final VoidCallback onTap;

  const _MenuButton({
    Key? key,
    required this.emoji,
    required this.text,
    required this.active,
    required this.onTap,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final cs = Theme.of(context).colorScheme;
    final emojiWidget = active
        ? Text(emoji,
            style: TextStyle(fontSize: AppTheme.menuEmojiSize, height: 1))
        : ColorFiltered(
            colorFilter: _kGray,
            child: Text(emoji,
                style: TextStyle(fontSize: AppTheme.menuEmojiSize, height: 1)),
          );

    return GestureDetector(
      onTap: () {
        HapticFeedback.selectionClick(); // –≤–æ—Ç –∑–¥–µ—Å—å!
        onTap();
      },
      child: AnimatedContainer(
        duration: AppTheme.animFast,
        padding: EdgeInsets.symmetric(
          horizontal: AppTheme.menuButtonPadH,
          vertical: AppTheme.menuButtonPadV,
        ),
        decoration: BoxDecoration(
          color: active
              ? cs.surface
              : Colors
                  .transparent, // –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∑—Ä–∞—á–Ω—ã, blur –≤–∏–¥–µ–Ω!
          borderRadius: BorderRadius.circular(AppTheme.menuButtonRadius),
          border: Border.all(
            color: active ? cs.primary : cs.outlineVariant.withOpacity(0.36),
            width: active ? 2 : 1,
          ),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Padding(
              padding: const EdgeInsets.only(bottom: 1),
              child: emojiWidget,
            ),
            const SizedBox(width: 5),
            Text(
              text,
              style: TextStyle(
                fontSize: AppTheme.menuFontSize,
                fontWeight: active ? FontWeight.w700 : FontWeight.w500,
                color: active ? cs.primary : cs.onSurface,
              ),
            ),
          ],
        ),
      ),
    );
  }
}
